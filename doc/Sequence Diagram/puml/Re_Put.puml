@startuml Manage Reservation (PUT)

header Coworking Space Reservation System Sequence Diagram
footer Group Yossawat & Supanut
title "Manage Reservation (PUT)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservations" as routerReservations
participant "<<middleware>>\n:auth" as middleware
participant "<<controllers>>\n:reservations" as controllersReservations
participant "<<model>>\n:Reservations" as modelReservation
database "<<MySQL>>\n:reservations" as ReservationsDatabase

client -> server ++:req.put('/reservations/:id')
server -> routerReservations ++:app.use('/reservations' ,reservations)
routerReservations -> middleware ++:protect()\nauthorize('admin','user')
alt Already logged in and correct role
    middleware -> controllersReservations ++: updateReservation()
else Not logged in yet
    middleware --> client : res.status(401).json({ sucess: false, message: 'Not authorize to access this route' })
else Wrong role
    middleware --> client --: res.status(403).json({ sucess: false, message: `User role ${req.user.role} is not authorized to access this route` })
end
controllersReservations -> modelReservation ++: update(req.params.id, req.body)
modelReservation -> ReservationsDatabase ++: ReservationSchema
ReservationsDatabase --> modelReservation --: modifiedReservation
controllersReservations <-- modelReservation --: modifiedReservation
controllersReservations -> client --:res.status(200).json({ success: true, data: modifiedReservation.dataValues });

@enduml
