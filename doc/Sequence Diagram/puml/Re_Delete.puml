@startuml Manage Reservation (DELETE)

header Coworking Space Reservation System Sequence Diagram
footer Group Yossawat & Supanut
title "Manage Reservation (DELETE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservations" as routerReservations
participant "<<middleware>>\n:auth" as middleware
participant "<<controllers>>\n:reservations" as controllersReservations
participant "<<model>>\n:Reservations" as modelReservation
database "<<MySQL>>\n:coworkingspaces" as CoworkingSpacesDatabase

client -> server ++:req.delete('/reservations/:id')
server -> routerReservations ++:app.use('/reservations' ,reservations)
routerReservations -> middleware ++:protect()\nauthorize('admin','user')
alt Already logged in and correct role
    middleware --> routerReservations : next()
    routerReservations -> controllersReservations ++: deleteReservation()
else Not logged in yet
    middleware --> client : res.status(401).json({ sucess: false, message: 'Not authorize to access this route' })
else Wrong role
    middleware --> client --: res.status(403).json({ sucess: false, message: `User role ${req.user.role} is not authorized to access this route` })
end
controllersReservations -> modelReservation ++: findByPk(req.params.id)
modelReservation -> CoworkingSpacesDatabase ++: ReservationSchema
CoworkingSpacesDatabase --> modelReservation : reservation
controllersReservations <-- modelReservation : reservation
alt found in database
    controllersReservations -> modelReservation : destroy(req.params.id)
else not found in database
    controllersReservations -> client : res.status(404).json({ success: false,message: `No reservation with id ${req.params.id}` })
end
modelReservation -> CoworkingSpacesDatabase : ReservationSchema
CoworkingSpacesDatabase --> modelReservation --: reservation
controllersReservations --> client --: res.status(200).json({ success: true, data: {} })

@enduml
